{"ast":null,"code":"var _jsxFileName = \"D:\\\\webnovel\\\\client\\\\src\\\\pages\\\\List.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport axios from 'axios';\nimport Paging from '../components/Paging';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst List = () => {\n  _s();\n  const {\n    search\n  } = useLocation();\n  const queryParams = new URLSearchParams(search);\n  const genre = queryParams.get('genre');\n  const page = queryParams.get('page');\n  const [novel, setNovel] = useState([{\n    novelid: '',\n    title: '',\n    category: '',\n    thumbnail: ''\n  }]);\n  const [rate, setRate] = useState([{\n    novelid: '',\n    title: '',\n    avgrate: ''\n  }]);\n  const [count, setCount] = useState(0);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [currentPosts, setCurrentPosts] = useState(0);\n  const postPerPage = 5;\n  const indexOfLastPost = currentPage * postPerPage;\n  const indexOfFirstPost = indexOfLastPost - postPerPage;\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const rawData = await axios.get('http://localhost:8000/novel', {});\n        console.log(rawData);\n        const sortedData = await rawData.data.filter(it => it.category == genre);\n        console.log(sortedData);\n        const novels = sortedData.map(it => ({\n          novelid: it.novelid,\n          title: it.title,\n          category: it.category,\n          thumbnail: it.thumbnail\n        }));\n        const sortedNovels = [...novels].sort((a, b) => Number(b.novelid) - Number(a.novelid));\n        const rawRate = await axios.get('http://localhost:8000/avgrate', {});\n        const rates = await rawRate.data.map(it => ({\n          novelid: it.novelid,\n          title: it.title,\n          avgrate: it.avgrate\n        }));\n        setNovel(sortedNovels);\n        setRate(rates);\n        setCount(sortedNovels.length);\n      } catch (error) {\n        console.error('Error fetching data', error);\n      }\n    }\n    fetchData();\n  }, [genre, page]);\n  useEffect(() => {\n    setCurrentPosts(novel.slice(indexOfFirstPost, indexOfLastPost));\n    console.log(currentPosts);\n  }, [novel, page, genre]);\n  const handleChangePage = page => {\n    setCurrentPage(page);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: currentPosts && currentPosts.length > 0 ? currentPosts.map(it => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: it.thumbnail\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: it.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 29\n          }, this), rate.filter(rate => rate.novelid == it.novelid) ? rate.filter(rate => rate.novelid == it.novelid).map(prev => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: prev.avgrate\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 33\n          }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"\\\"\\uB9AC\\uBDF0\\uAC00 \\uC874\\uC7AC\\uD558\\uC9C0 \\uC54A\\uC2B5\\uB2C8\\uB2E4\\\"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 34\n          }, this)]\n        }, it.novelid, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 25\n        }, this)) : ''\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Paging, {\n        page: currentPage,\n        count: count,\n        handleChangePage: handleChangePage,\n        postPerPage: postPerPage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n};\n_s(List, \"5ZLDkyc05KtSBS5tt8fS+edoI80=\", false, function () {\n  return [useLocation];\n});\n_c = List;\nexport default List;\nvar _c;\n$RefreshReg$(_c, \"List\");","map":{"version":3,"names":["useState","useEffect","useLocation","axios","Paging","jsxDEV","_jsxDEV","List","_s","search","queryParams","URLSearchParams","genre","get","page","novel","setNovel","novelid","title","category","thumbnail","rate","setRate","avgrate","count","setCount","currentPage","setCurrentPage","currentPosts","setCurrentPosts","postPerPage","indexOfLastPost","indexOfFirstPost","fetchData","rawData","console","log","sortedData","data","filter","it","novels","map","sortedNovels","sort","a","b","Number","rawRate","rates","length","error","slice","handleChangePage","children","src","fileName","_jsxFileName","lineNumber","columnNumber","prev","_c","$RefreshReg$"],"sources":["D:/webnovel/client/src/pages/List.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport Paging from '../components/Paging';\r\n\r\n\r\n\r\nconst List = () => {\r\n\r\n    const { search } = useLocation();\r\n    const queryParams = new URLSearchParams(search);\r\n\r\n    const genre = queryParams.get('genre');\r\n    const page = queryParams.get('page');\r\n    const [ novel, setNovel] = useState([{\r\n        novelid : '',\r\n        title : '',\r\n        category: '',\r\n        thumbnail : '',\r\n    }])\r\n    const [ rate, setRate ] = useState([{\r\n        novelid : '',\r\n        title: '',\r\n        avgrate : ''\r\n    }])\r\n    const [count, setCount] = useState(0)\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [currentPosts, setCurrentPosts] = useState(0);\r\n    const postPerPage = 5;\r\n    const indexOfLastPost = currentPage * postPerPage;\r\n    const indexOfFirstPost = indexOfLastPost - postPerPage\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            try {\r\n                const rawData = await axios.get('http://localhost:8000/novel', {});\r\n                console.log(rawData)\r\n                const sortedData = await rawData.data.filter((it) => it.category == genre);\r\n                console.log(sortedData)\r\n                const novels = sortedData.map((it) => ({\r\n                    novelid : it.novelid,\r\n                    title : it.title,\r\n                    category : it.category,\r\n                    thumbnail : it.thumbnail,\r\n                }));\r\n                const sortedNovels = [...novels].sort((a,b) => Number(b.novelid) - Number(a.novelid));\r\n                const rawRate = await axios.get('http://localhost:8000/avgrate', {});\r\n                const rates = await rawRate.data.map((it) => ({\r\n                    novelid : it.novelid,\r\n                    title: it.title,\r\n                    avgrate : it.avgrate\r\n                }));\r\n                setNovel(sortedNovels);\r\n                setRate(rates);\r\n                setCount(sortedNovels.length); \r\n            } catch (error) {\r\n                console.error('Error fetching data', error);\r\n            }\r\n            \r\n        }\r\n        fetchData();\r\n    },[genre, page])\r\n\r\n    useEffect(() => {\r\n        setCurrentPosts(novel.slice(indexOfFirstPost, indexOfLastPost));\r\n        console.log(currentPosts)\r\n    }, [novel, page, genre])\r\n\r\n    const handleChangePage = (page) => {\r\n        setCurrentPage(page)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <div>\r\n                    {currentPosts && currentPosts.length > 0 ? \r\n                    currentPosts.map((it) => (\r\n                        <div key={it.novelid}>\r\n                            <div>\r\n                                <img src={it.thumbnail} />\r\n                            </div>\r\n                            <div>\r\n                                <p>{it.title}</p>\r\n                            </div>\r\n                            {rate.filter((rate) => rate.novelid == it.novelid) ? \r\n                            rate.filter((rate) => rate.novelid == it.novelid).map((prev) => (\r\n                                <div>\r\n                                    {prev.avgrate}\r\n                                </div>\r\n                            )) : <div>\"리뷰가 존재하지 않습니다\"</div>}\r\n                        </div>\r\n                    ))\r\n                    : ''}\r\n                </div>\r\n                <Paging page={currentPage} count={count} handleChangePage={handleChangePage} postPerPage={postPerPage} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default List;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}